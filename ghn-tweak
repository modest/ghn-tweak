#!/usr/bin/env bash

function die() {
  echo "$@" >&2
  exit 1
}

if [[ -z "$2" ]]; then
  die "
USAGE:

  ghn-tweak <host>[,...] <password> [<key>[=value] ...]

  ghn-tweak <host> <password>
  ghn-tweak <host> <password> <key>
  ghn-tweak <host> <password> <key>=<value>
  ghn-tweak <host1>,<host2>,<host3> <password> <key1>=<value1> <key2>=<value2> <key3>=<value3>

  Multiple hosts should be comma-separated without spaces and must share a password.

EXAMPLES:

  List the whole configuration and status:
  $ ghn-tweak 192.168.0.5 admin

  Get the device's Ethernet MAC address:
  $ ghn-tweak 192.168.0.5 admin SYSTEM.PRODUCTION.MAC_ADDR

  Enable power-saving on Ethernet inactivity:
  $ ghn-tweak 192.168.0.5 admin POWERSAVING.GENERAL.MODE=2

  On 3 powerline adapters, enable DHCP and NTP
  $ ghn-tweak 10.0.0.2,10.0.0.3,10.0.0.4 admin \\
      DHCP.GENERAL.ENABLED_IPV4=YES \\
      DNS.GENERAL.IPV4_TYPE=DHCPv4 \\
      NTP.GENERAL.ENABLED=YES

  On 3 powerline adapters, set a manual pairing key and powerline domain
  $ ghn-tweak 10.0.0.2,10.0.0.3,10.0.0.4 admin \\
      NODE.GENERAL.DOMAIN_NAME=StrangerThings \\
      PAIRING.GENERAL.PASSWORD=wzy47yhlzltq42t2txuusg6wg \\
      PAIRING.GENERAL.SECURED=YES

  Do a hardware reset on 3 powerline adapters
  $ ghn-tweak 10.0.0.2,10.0.0.3,10.0.0.4 admin SYSTEM.GENERAL.HW_RESET=1

CAUTION: 

  These configuration values are unsupported and undocumented.

ghn-tweak v0.1
"
fi 

PWD_backup="$PWD"
DEFAULT_IFS="$IFS"

tmp="$(mktemp -d)"
cd "${tmp}"

cookie_dir="$HOME/.config/ghn-tweak/tokens"

if [[ ! -d "$cookie_dir" ]]; then
  mkdir -p "${cookie_dir}" || cookie_dir="."
  chmod go-rwx "${cookie_dir}" || true 2>/dev/null
fi

function cleanup() {
  test -d "${PWD_backup}" && cd "${PWD_backup}" || cd /
  rm -rf "$tmp"
}
trap cleanup EXIT SIGINT SIGTERM

hosts="$1"
host=
password="$2"
keys="${@:3}"

if [[ "$hosts" == *"://"* ]]; then
  die "Error: When providing the hostname, don't include a scheme prefix (http://) or port."
fi

function doCurlGet() {
  # httpResultCode=doCurlGet <remote-path> [<output-file> [<string of any additional curl arguments>]]
  local path="$1"
  local out="$2"
  local extra_args_arraystr="$3"
  IFS=¬; read -r -a extra_args_array <<< "${extra_args_arraystr}"; IFS="$DEFAULT_IFS"

  local args_array=()
  args_array+=(--silent)
  args_array+=(--connect-timeout 2)
  args_array+=(--max-time 10)
  args_array+=(--retry 10)
  args_array+=(--retry-max-time 15)
  args_array+=(--retry-delay 0)
  args_array+=(--retry-connrefused)
  args_array+=(-H "Accept: text/html,*/*")
  args_array+=(-H "User-Agent: Mozilla/5.0")
  args_array+=(-H "Host: ${host}")
  args_array+=(-H "Origin: http://${host}")
  args_array+=(-H "Connection: keep-alive")
  args_array+=(-H "Referer: http://${host}${path}")
  args_array+=(-o "${out:-/dev/null}")
  args_array+=(-w '%{http_code}')
  args_array+=(--cookie-jar "${cookie_dir}/cookies.txt")

  args_array+=("${extra_args_array[@]}")

  curl "${args_array[@]}" "${host}${path}"
}

function doCurlPost() {
  # httpResultCode=doCurlPost <remote-path> <output-file> [<formkey=formvalue>] [...]
  local path="$1"
  local out="$2"
  local args_array=()
  args_array+=(-X POST)
  args_array+=(-H 'Content-Type: application/x-www-form-urlencoded')
  for kv in "${@:3}"; do
    args_array+=(-d "${kv}")
  done
  IFS=¬; args_arraystr="${args_array[*]}"; IFS="$DEFAULT_IFS"

  doCurlGet "$path" "${out}" "${args_arraystr}"
}

function doCurlGetWithAuthRetry() {
  local res_code=$(doCurlGet ${@})
  if [[ "$res_code" == 403 ]]; then
    doAuth
    res_code=$(doCurlGet ${@})
    if [[ "$res_code" == 403 ]]; then
      die "Error: Authentication failure. Is the password right?"
    else
      echo "${res_code}"
    fi
  else
    echo "${res_code}"
  fi
}

function doCurlPostWithAuthRetry() {
  local res_code=$(doCurlPost ${@})
  if [[ "$res_code" == 403 ]]; then
    doAuth
    res_code=$(doCurlPost ${@})
    if [[ "$res_code" == 403 ]]; then
      die "Error: Authentication failure. Is the password right?"
    else
      echo "${res_code}"
    fi
  else
    echo "${res_code}"
  fi
}

function doAuth() {
  local res_code=$(doCurlPost '/password.html' 'authresult.html' ".CSRFTOKEN=" ".REDIRECT=%2F" ".PASSWORD=${password}")

  if [[ "$res_code" -lt 200 ]]; then
    die "Failed to connect to a web server at http://${host}  Is the address correct?"
  fi

  if [[ "$res_code" != "200" ]]; then
    die "Authentication failed with HTTP error ${res_code}"
  fi
}

function getSetKeys() {
  # getSetKeys keyA keyB keyC
  # getSetKeys keyA=1 keyB=2 keyC=3

  local get_keys_list=()
  local set_kv_pairs=()
  local kv=
  local kv_key=
  local kv_value=

  for kv in ${@}; do
    if [[ "$kv" == *"="* ]]; then
      kv_key="$(echo "${kv%%=*}" | tr '[:lower:]' '[:upper:]')"
      kv_value="${kv#*=}"
      get_keys_list+=("${kv_key}")
      set_kv_pairs+=("${kv_key}=${kv_value}")
    else
      kv_key="$(echo "${kv}" | tr '[:lower:]' '[:upper:]')"

      get_keys_list+=("$kv_key")
    fi
  done

  # First, show the current values for all keys provided (read or read/write)
  if [[ -n "${get_keys_list}" ]]; then
    getValues "${get_keys_list[@]}"
  fi
  if [[ -n "${set_kv_pairs}" ]]; then
    # Try to set values for all key-value pairs as a batch change first.
    # This is ideal, especially in cases where incomplete changes may break things.
    setValues "${set_kv_pairs[@]}"

    # Since batch changes are sometimes inexplicably ignored sometimes, 
    # redundantly set each key-value manually.
    for kv in ${set_kv_pairs[@]}; do
      setValues "$kv"
    done

    # Read back the new values for all keys
    echo "-- changed ->" >&2
    getValues "${get_keys_list[@]}"
  fi
}

function getValues() {
  # value_for_key=getValue <key>
  # all_key_value_pairs=getValue
  # key_value_pairs=getValue <key> <key> <key>

  specified_key_count=0

  local get_keys=$@
  local get_key=
  local path="/getall.html"

  if [[ -n "$get_keys" ]]; then
    path="/get.html"
    separator_char="?"

    for get_key in ${get_keys[@]}; do
      path="${path}${separator_char}${get_key}"
      separator_char="&"
      specified_key_count=$((specified_key_count+1))
    done
  fi

  local res_code=$(doCurlGetWithAuthRetry "${path}" "values.html")
  if [[ "$res_code" != "200" ]]; then
    die "Failed to get values. HTTP error ${res_code}"
  fi

  cleanHtmlKeyValues "values.html" "values.txt"
  if [[ ${specified_key_count} == 1 ]]; then
    printSingleValue "values.txt"
  else 
    cat "values.txt"
  fi
}

function cleanHtmlKeyValues() {
  # cleanHtmlKeyValues <infile.html> <outfile.txt>
  local infile="$1"
  local outfile="$2"
  tr '\n' '¬' < "${infile}" | tr -d '\r' | sed -E -e 's/<!--.+-->¬(.*)/\1/' -e 's/=Not found¬/=¬/g' -e 's/¬¬¬/\\n\\n¬/g' -e 's/¬¬/\\n¬/g' -e 's/¬([^¬=]*[^A-Z._0-9=¬][^¬]*)/\\n\1/g' | tr '¬' '\n' | sed -E -e 's/\\n$//' | grep -v "^$" > "${outfile}"
}

function printSingleValue() {
  # printSingleValue <values.txt> 
  local infile="$1"
  local key="$(head -n 1 "${infile}" | sed -E -e 's/^([^=]*)=.*/\1/')"
  local value="$(head -n 1 "${infile}" | sed -E -e 's/^[^=]*=(.*)/\1/' -e 's/\\n/¬/g' -e 's/^Not found$//' | tr '¬' '\n')"

  echo -n "${key}=" >&2
  echo "$value"
}

function setValues() {
  # setValue <key>=<value> [...]
  local res_code=$(doCurlPostWithAuthRetry '/get.html' 'setresult.html' "CSRFTOKEN=" "REDIRECT=%2Fget.html" ${@})
  if [[ "$res_code" != "200" ]]; then
    die "Failed to set value. HTTP error ${res_code}"
  fi
}

IFS=,; for host in $hosts; do
  IFS="$DEFAULT_IFS"
  if [[ "$hosts" == *","* ]]; then
    echo "" >&2
    echo "$host:" >&2
    echo "" >&2
  fi
  if [[ -n "$keys" ]]; then
    getSetKeys ${keys[@]}
  else
    getValues
  fi
done